
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
//
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function ChartExprParams_Create(AOwner: TComponent): TChartExprParams; extdecl;
begin
  handleExceptionBegin
  Result :=  TChartExprParams.Create(TFpExpressionParser(AOwner), nil);
  handleExceptionEnd
end;

procedure ChartExprParams_Free(AObj: TChartExprParams); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ChartExprParams_Owner(AObj: TChartExprParams): TPersistent; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ChartExprParams_Add(AObj: TChartExprParams): TCollectionItem; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Add;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ChartExprParams_Assign(AObj: TChartExprParams; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ChartExprParams_BeginUpdate(AObj: TChartExprParams); extdecl;
begin
  handleExceptionBegin
  AObj.BeginUpdate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ChartExprParams_Clear(AObj: TChartExprParams); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ChartExprParams_Delete(AObj: TChartExprParams; Index: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Delete(Index);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ChartExprParams_EndUpdate(AObj: TChartExprParams); extdecl;
begin
  handleExceptionBegin
  AObj.EndUpdate;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ChartExprParams_FindItemID(AObj: TChartExprParams; ID: Integer): TCollectionItem; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.FindItemID(ID);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ChartExprParams_GetNamePath(AObj: TChartExprParams): PChar; extdecl;
begin
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ChartExprParams_Insert(AObj: TChartExprParams; Index: Integer): TCollectionItem; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Insert(Index);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ChartExprParams_ClassType(AObj: TChartExprParams): TClass; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ChartExprParams_ClassName(AObj: TChartExprParams): PChar; extdecl;
begin
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ChartExprParams_InstanceSize(AObj: TChartExprParams): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ChartExprParams_InheritsFrom(AObj: TChartExprParams; AClass: TClass): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ChartExprParams_Equals(AObj: TChartExprParams; Obj: TObject): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ChartExprParams_GetHashCode(AObj: TChartExprParams): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ChartExprParams_ToString(AObj: TChartExprParams): PChar; extdecl;
begin
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function ChartExprParams_GetCount(AObj: TChartExprParams): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Count;
  handleExceptionEnd
end;

function ChartExprParams_GetItems(AObj: TChartExprParams; Index: Integer): TCollectionItem; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Items[Index];
  handleExceptionEnd
end;

procedure ChartExprParams_SetItems(AObj: TChartExprParams; Index: Integer; AValue: TCollectionItem); extdecl;
begin
  handleExceptionBegin
  AObj.Items[Index] := AValue;
  handleExceptionEnd
end;

function ChartExprParams_StaticClassType: TClass; extdecl;
begin
  Result := TChartExprParams;
end;

function ChartExprParams_AddParam(AObj: TChartExprParams; AName: string; AValue: Double): TChartExprParam; extdecl;
begin
  handleExceptionBegin
  Result := AObj.AddParam(AName, AValue);
  handleExceptionEnd
end;

function ChartExprParams_FindParamByName(AObj: TChartExprParams; AName: string): TChartExprParam; extdecl;
begin
  handleExceptionBegin
  Result := AObj.FindParamByName(AName);
  handleExceptionEnd
end;

function ChartExprParams_GetParams(AObj: TChartExprParams; AIndex: Integer): TChartExprParam; extdecl;
begin
  handleExceptionBegin
  Result := AObj.Params[AIndex];
  handleExceptionEnd
end;

procedure ChartExprParams_SetParams(AObj: TChartExprParams; AIndex: Integer; AValue: TChartExprParam); extdecl;
begin
  handleExceptionBegin
  AObj.Params[AIndex] := AValue;
  handleExceptionEnd
end;

procedure ChartExprParams_GetValueByName(AObj: TChartExprParams; AName: string; var Result: Double); extdecl;
begin
  handleExceptionBegin
  Result := AObj.ValueByName[AName];
  handleExceptionEnd
end;

procedure ChartExprParams_SetValueByName(AObj: TChartExprParams; AName: string; AValue: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ValueByName[AName] := AValue;
  handleExceptionEnd
end;

exports
  ChartExprParams_Create,
  ChartExprParams_Free,
  ChartExprParams_Owner,
  ChartExprParams_Add,
  ChartExprParams_Assign,
  ChartExprParams_BeginUpdate,
  ChartExprParams_Clear,
  ChartExprParams_Delete,
  ChartExprParams_EndUpdate,
  ChartExprParams_FindItemID,
  ChartExprParams_GetNamePath,
  ChartExprParams_Insert,
  ChartExprParams_ClassType,
  ChartExprParams_ClassName,
  ChartExprParams_InstanceSize,
  ChartExprParams_InheritsFrom,
  ChartExprParams_Equals,
  ChartExprParams_GetHashCode,
  ChartExprParams_ToString,
  ChartExprParams_GetCount,
  ChartExprParams_GetItems,
  ChartExprParams_SetItems,
  ChartExprParams_StaticClassType,
  ChartExprParams_AddParam,
  ChartExprParams_FindParamByName,
  ChartExprParams_GetParams,
  ChartExprParams_SetParams,
  ChartExprParams_GetValueByName,
  ChartExprParams_SetValueByName;


